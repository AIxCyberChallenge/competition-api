// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/jobrunner/job/": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "submit a PoV, Patch, or combination for testing.  Submitting both tests a PoV against a Patch to determine if the PoV crashes after the patch is applied.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobrunner"
                ],
                "summary": "Run Test Job",
                "parameters": [
                    {
                        "description": "Submission body",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.JobArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        },
        "/jobrunner/job/{job_id}": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get the current status \u0026 any available results for a job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobrunner"
                ],
                "summary": "Get Job Results",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.ArchivedFile": {
            "type": "string",
            "enum": [
                "fuzz.out",
                "fuzz.out_base_repo",
                "pov_trigger",
                "patch",
                "unstripped_head_tarball",
                "unstripped_base_tarball",
                "diff_tarball",
                "stripped_repo_tarball",
                "unstripped_repo_tarball",
                "oss_fuzz_tarball",
                "sarif_submission",
                "sarif_broadcast",
                "freeform_pov"
            ],
            "x-enum-varnames": [
                "FileFuzzOutHead",
                "FileFuzzOutBase",
                "FilePOVTrigger",
                "FilePatch",
                "FileUnstrippedHeadTarball",
                "FileUnstrippedBaseTarball",
                "FileDiffTarball",
                "FileStrippedRepoTarball",
                "FileUnstrippedRepoTarball",
                "FileOSSFuzzTarball",
                "FileSARIFSubmission",
                "FileSARIFBroadcast",
                "FileFreeformPOV"
            ]
        },
        "types.Blob": {
            "type": "object",
            "properties": {
                "object_name": {
                    "type": "string"
                },
                "presigned_url": {
                    "type": "string"
                }
            }
        },
        "types.Error": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "types.JobArgs": {
            "type": "object",
            "required": [
                "architecture",
                "cache_key",
                "override_cache"
            ],
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "cache_key": {
                    "type": "string"
                },
                "cpus": {
                    "type": "integer"
                },
                "diff_tarball_url": {
                    "type": "string"
                },
                "engine": {
                    "type": "string"
                },
                "focus": {
                    "type": "string"
                },
                "fuzzer_name": {
                    "type": "string"
                },
                "memory_gb": {
                    "type": "integer"
                },
                "oss_fuzz_tarball_url": {
                    "type": "string"
                },
                "override_cache": {
                    "type": "boolean"
                },
                "patch_b64": {
                    "type": "string",
                    "format": "base64"
                },
                "patch_hash": {
                    "description": "Lower priority than b64",
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "repo_tarball_url": {
                    "type": "string"
                },
                "sanitizer": {
                    "type": "string"
                },
                "skip_patch_tests": {
                    "type": "boolean"
                },
                "task_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "testcase_b64": {
                    "type": "string",
                    "format": "base64"
                },
                "testcase_hash": {
                    "description": "Lower priority than b64",
                    "type": "string"
                }
            }
        },
        "types.JobArtifact": {
            "type": "object",
            "properties": {
                "archived_file": {
                    "$ref": "#/definitions/types.ArchivedFile"
                },
                "blob": {
                    "$ref": "#/definitions/types.Blob"
                },
                "context": {
                    "$ref": "#/definitions/types.ResultContext"
                },
                "filename": {
                    "type": "string"
                }
            }
        },
        "types.JobResponse": {
            "type": "object",
            "required": [
                "job_id",
                "status"
            ],
            "properties": {
                "artifacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobArtifact"
                    }
                },
                "job_id": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobResult"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.SubmissionStatus"
                }
            }
        },
        "types.JobResult": {
            "type": "object",
            "properties": {
                "cmd": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "context": {
                    "$ref": "#/definitions/types.ResultContext"
                },
                "return_code": {
                    "type": "integer"
                },
                "stderr_blob": {
                    "$ref": "#/definitions/types.Blob"
                },
                "stdout_blob": {
                    "$ref": "#/definitions/types.Blob"
                }
            }
        },
        "types.ResultContext": {
            "type": "string",
            "enum": [
                "pov_test_head_repo",
                "delta_test_base_repo"
            ],
            "x-enum-varnames": [
                "ResultCtxHeadRepoTest",
                "ResultCtxBaseRepoTest"
            ]
        },
        "types.SubmissionStatus": {
            "type": "string",
            "enum": [
                "accepted",
                "passed",
                "failed",
                "deadline_exceeded",
                "errored",
                "inconclusive"
            ],
            "x-enum-comments": {
                "SubmissionStatusAccepted": "Successfully submitted",
                "SubmissionStatusDeadlineExceeded": "Task deadline exceeded. All submissions marked accepted before the deadline will be evaluated.",
                "SubmissionStatusErrored": "Server side error when testing submission",
                "SubmissionStatusFailed": "Submission failed testing",
                "SubmissionStatusInconclusive": "Test continued running beyond timeout and will be manually reviewed after the round.  As a result this status is inconclusive.",
                "SubmissionStatusPassed": "Successfully evaluated submission"
            },
            "x-enum-varnames": [
                "SubmissionStatusAccepted",
                "SubmissionStatusPassed",
                "SubmissionStatusFailed",
                "SubmissionStatusDeadlineExceeded",
                "SubmissionStatusErrored",
                "SubmissionStatusInconclusive"
            ]
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Jobrunner API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

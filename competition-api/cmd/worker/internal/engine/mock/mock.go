// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aixcyberchallenge/competition-api/competition-api/cmd/worker/internal/engine (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock.go -package mock . Engine
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	engine "github.com/aixcyberchallenge/competition-api/competition-api/cmd/worker/internal/engine"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// ApplyPatch mocks base method.
func (m *MockEngine) ApplyPatch(ctx context.Context, data *engine.Params, patchPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPatch", ctx, data, patchPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyPatch indicates an expected call of ApplyPatch.
func (mr *MockEngineMockRecorder) ApplyPatch(ctx, data, patchPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPatch", reflect.TypeOf((*MockEngine)(nil).ApplyPatch), ctx, data, patchPath)
}

// Build mocks base method.
func (m *MockEngine) Build(ctx context.Context, data *engine.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockEngineMockRecorder) Build(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockEngine)(nil).Build), ctx, data)
}

// Check mocks base method.
func (m *MockEngine) Check(ctx context.Context, data *engine.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockEngineMockRecorder) Check(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockEngine)(nil).Check), ctx, data)
}

// RunPov mocks base method.
func (m *MockEngine) RunPov(ctx context.Context, data *engine.Params, triggerPath string, shouldCrash bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPov", ctx, data, triggerPath, shouldCrash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPov indicates an expected call of RunPov.
func (mr *MockEngineMockRecorder) RunPov(ctx, data, triggerPath, shouldCrash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPov", reflect.TypeOf((*MockEngine)(nil).RunPov), ctx, data, triggerPath, shouldCrash)
}

// RunTests mocks base method.
func (m *MockEngine) RunTests(ctx context.Context, data *engine.Params, shouldPass bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTests", ctx, data, shouldPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTests indicates an expected call of RunTests.
func (mr *MockEngineMockRecorder) RunTests(ctx, data, shouldPass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTests", reflect.TypeOf((*MockEngine)(nil).RunTests), ctx, data, shouldPass)
}

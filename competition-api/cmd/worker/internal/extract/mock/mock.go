// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aixcyberchallenge/competition-api/competition-api/cmd/worker/internal/extract (interfaces: Extractor)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock.go -package mock . Extractor
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExtractor is a mock of Extractor interface.
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorMockRecorder
	isgomock struct{}
}

// MockExtractorMockRecorder is the mock recorder for MockExtractor.
type MockExtractorMockRecorder struct {
	mock *MockExtractor
}

// NewMockExtractor creates a new mock instance.
func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &MockExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractor) EXPECT() *MockExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockExtractor) Extract(ctx context.Context, reader io.Reader, outDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx, reader, outDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Extract indicates an expected call of Extract.
func (mr *MockExtractorMockRecorder) Extract(ctx, reader, outDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockExtractor)(nil).Extract), ctx, reader, outDir)
}

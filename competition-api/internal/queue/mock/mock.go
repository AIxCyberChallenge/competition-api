// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aixcyberchallenge/competition-api/competition-api/internal/queue (interfaces: Queuer,MessageHandler)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock.go -package mock . Queuer,MessageHandler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	queue "github.com/aixcyberchallenge/competition-api/competition-api/internal/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueuer is a mock of Queuer interface.
type MockQueuer struct {
	ctrl     *gomock.Controller
	recorder *MockQueuerMockRecorder
	isgomock struct{}
}

// MockQueuerMockRecorder is the mock recorder for MockQueuer.
type MockQueuerMockRecorder struct {
	mock *MockQueuer
}

// NewMockQueuer creates a new mock instance.
func NewMockQueuer(ctrl *gomock.Controller) *MockQueuer {
	mock := &MockQueuer{ctrl: ctrl}
	mock.recorder = &MockQueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuer) EXPECT() *MockQueuerMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockQueuer) Dequeue(ctx context.Context, timeout time.Duration, handler queue.MessageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", ctx, timeout, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockQueuerMockRecorder) Dequeue(ctx, timeout, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockQueuer)(nil).Dequeue), ctx, timeout, handler)
}

// Enqueue mocks base method.
func (m *MockQueuer) Enqueue(ctx context.Context, message any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueuerMockRecorder) Enqueue(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueuer)(nil).Enqueue), ctx, message)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageHandler) Handle(ctx context.Context, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageHandlerMockRecorder) Handle(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageHandler)(nil).Handle), ctx, message)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aixcyberchallenge/competition-api/competition-api/internal/upload (interfaces: Uploader)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock.go -package mock . Uploader
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
	isgomock struct{}
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockUploader) Exists(ctx context.Context, url string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUploaderMockRecorder) Exists(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUploader)(nil).Exists), ctx, url)
}

// PresignedReadURL mocks base method.
func (m *MockUploader) PresignedReadURL(ctx context.Context, url string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignedReadURL", ctx, url, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignedReadURL indicates an expected call of PresignedReadURL.
func (mr *MockUploaderMockRecorder) PresignedReadURL(ctx, url, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignedReadURL", reflect.TypeOf((*MockUploader)(nil).PresignedReadURL), ctx, url, duration)
}

// StoreIdentifier mocks base method.
func (m *MockUploader) StoreIdentifier(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIdentifier", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreIdentifier indicates an expected call of StoreIdentifier.
func (mr *MockUploaderMockRecorder) StoreIdentifier(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIdentifier", reflect.TypeOf((*MockUploader)(nil).StoreIdentifier), ctx)
}

// Upload mocks base method.
func (m *MockUploader) Upload(ctx context.Context, reader io.ReadSeeker, length int64, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, reader, length, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockUploaderMockRecorder) Upload(ctx, reader, length, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploader)(nil).Upload), ctx, reader, length, url)
}
